/**
 * Template Plugin 'snippet'
 * Provide fonction closure
 */

module.exports = (function() {
	// Local hidden variables
	// ---------------------
	var now = new Date().toISOString().substr(0,10);
	var tmpl = {};
	tmpl['shell']		= {	text: '#!/usr/bin/env bash\necho "--> Start $0"\n\nexit 0',
							pos: {line: 2, ch: 0},
							mode: 'shell',
							theme: 'vibrant-ink'
						};
	tmpl['python']		= {	text: '#!/usr/bin/env python\nimport sys\nif __name__ == "__main__":\n\tprint "--> Start", sys.argv[0]\n\t\n\tsys.exit(0)',
							pos: {line: 4, ch: 1},
							mode: {name: 'python', version: 2, singleLineStringErrors: false},
							theme: 'vibrant-ink'
						};
	tmpl['node']		= {	text: '#!/usr/bin/env node\nconsole.log("--> Start", process.argv[1]);\n',
							pos: {line: 2, ch: 0},
							mode: 'javascript',
							theme: 'vibrant-ink'
						};
	tmpl['c']			= {	text: '#include <stdio.h>\n#include <stdlib.h>\n\n/**\n * File:\n * Dated: ' + now + '\n */\nint main(int argc, char* argv[]) {\n\t// Your code...\n\texit(0);\n}\n',
							pos: {line: 8, ch: 1},
							mode: 'text/x-c',
							theme: 'vibrant-ink'
						};
	tmpl['html']		= {	text: '<!DOCTYPE HTML>\n<html>\n<head>\n  <meta charset="utf-8"/>\n  <title>Window Title</title>\n<body\n  <h1>Title</h1>\n  <p></p>\n</body>\n</html>',
							pos: {line: 7, ch: 5},
							mode: 'shell',
							theme: 'monokai'
						};
	tmpl['java']		= {	text: '/**\n * File: Main.java\n * Dated: ' + now + '\n */\npublic class Main {\n\tpublic static void main(String[] args) {\n\tSystem.out.println("Hello, World");\n\t// Your code...\n\t}\n}',
							pos: {line: 7, ch: 1},
							mode: 'text/x-java',
							theme: 'vibrant-ink'
						};
	tmpl['markdown']	= {	text: '#Main Title\n' + now + '\n\n> Abstract\n\nYour text...',
							pos: {line: 5, ch: 0},
							mode:'markdown',
							theme: 'solarized light'
						};
	
	// Create an array of the keys in Object 'tmpl'
	// (language extension only usable with Node and Chrome)
	// ---------------------
	var typeList = Object.keys(tmpl);
	
	// Build a regEx pattern including every registered mode
	// - Matching separate words in text with '\b' metachar (boundary)
	//   WARN: '\' char needs to be escaped in RegExp(...)
	// - Ignore case with option 'i' in order to match 'python' or 'Python'
	// We will later select the first recognized word with 'match[1]'
	// ---------------------
	var typesPatt = new RegExp('\\b(' + typeList.join('|') + ')\\b', 'i');
	
	// Compile regEx in place only once (method deprecated in v1.5)
	typesPatt.compile(typesPatt);
	
	// Search keyword in line
	// ---------------------
	function searchMode(line) {
		var match = line.match(typesPatt);
		if (match !== null) {
			return tmpl[match[1].toLowerCase()];
		}
		return null;
	};
	
	// Select template
	// ---------------------
	function byName(type) {
		return tmpl[type];
	};
	function byNum(n) {
		return tmpl[typeList[n]];
	};

	// Replace CodeMirror content
	// ---------------------
	function loadSnippet(cm) {
		var pos = cm.getCursor();
		var line = cm.getLine(pos.line);
		var snip = searchMode(line);
		if (snip !== null) {
			cm.setOption('mode', snip.mode);
			cm.setOption('theme', snip.theme);
			cm.setValue(snip.text);
			cm.setCursor(snip.pos);
			return true;			
		}
		else
			cm.setValue('Put cursor in list then press [Ctrl-$] to insert snippet:\n- ' + typeList.join('\n- '));
			return false;
	};
	
	// Return function
	// ---------------------
	return {
		byName: byName,
		byNum:  byNum,
		searchMode: searchMode,
		loadSnippet: loadSnippet
	};
})();