/**
 * Template Plugin 'snippet'
 * Immediate execution module
 * provide variable name closure
 */

module.exports = (function() {
	// Local hidden variables
	// Javascript does not support 'here document'
	// ---------------------
	var now = new Date().toISOString().substr(0,10);
	var tmpl = {};
	var snip = null;

	// ---------------------
	tmpl.shell		= {	text: 
'#!/usr/bin/env bash\n\
echo "--> Start $0"\n\
\n\
exit 0',
						pos: {line: 2, ch: 0},
						mode: 'shell',
						theme: 'vibrant-ink',
						file: '/tmp/nodedit.sh'
						};

	// ---------------------
	tmpl.python		= {	text: 
'#!/usr/bin/env python\n\
import sys\n\
if __name__ == "__main__":\n\
\tprint "--> Start", sys.argv[0]\n\
\t# Your code...\n\
\tsys.exit(0)',
						pos: {line: 4, ch: 1},
						mode: {name: 'python', version: 2, singleLineStringErrors: false},
						theme: 'vibrant-ink',
						file: '/tmp/nodedit.py'
						};

	// ---------------------
	tmpl.javascript	= {	text:
'#!/usr/bin/env node\n\
console.log("--> Start", process.argv[1]);\n',
						pos: {line: 2, ch: 0},
						mode: 'javascript',
						theme: 'vibrant-ink',
						file: '/tmp/nodedit.js'
						};

	// ---------------------
	tmpl.c			= {	text:
'#include <stdio.h>\n\
#include <stdlib.h>\n\
\n\
/**\n * File:\n\
 * Dated: ' + now + '\n\
 */\n\
int main(int argc, char* argv[]) {\n\
\t// Your code...\n\
\texit(0);\n\
}',
						pos: {line: 8, ch: 1},
						mode: 'text/x-c',
						theme: 'vibrant-ink',
						file: '/tmp/nodedit.c'
						};

	// ---------------------
	tmpl.html		= {	text:
'<!DOCTYPE HTML>\n\
<html>\n\
<head>\n\
  <meta charset="utf-8"/>\n\
  <title>Window Title</title>\n\
</head>\n\
<body>\n\
  <h1>Title</h1>\n\
  <p></p>\n\
</body>\n\
</html>',
						pos: {line: 8, ch: 5},
						mode: 'htmlmixed',
						theme: 'monokai',
						file: '/tmp/nodedit.html'
						};

	// ---------------------
	tmpl.java		= {	text:
'/**\n\
 * File: Main.java\n\
 * Dated: ' + now + '\n\
 */\n\
public class Main {\n\
\tpublic static void main(String[] args) {\n\
\tSystem.out.println("Hello, World");\n\
\t// Your code...\n\
\t}\n\
}',
						pos: {line: 7, ch: 1},
						mode: 'text/x-java',
						theme: 'vibrant-ink',
						file: '/tmp/nodedit.java'
						};

	// ---------------------
	tmpl.markdown	= {	text:
'#Main Title\n\
' + now + '\n\
\n\
> Abstract\n\
\n\
Your text...',
						pos: {line: 5, ch: 0},
						mode:'markdown',
						theme: 'solarized light',
						file: '/tmp/nodedit.md'
						};

	// Create an array of the keys in Object 'tmpl'
	// (language extension only usable with Node and Chrome)
	// ---------------------
	var typeList = Object.keys(tmpl);

	// Build a regEx pattern including every registered mode
	// - Matching separate words in text with '\b' metachar (boundary)
	//   WARN: '\' char needs to be escaped in RegExp(...)
	// - Ignore case with option 'i' in order to match 'python' or 'Python'
	// We will later select the first recognized word with 'match[1]'
	// ---------------------
	var typesPatt = new RegExp('\\b(' + typeList.join('|') + ')\\b', 'i');

	// Compile regEx in place only once (method deprecated in v1.5)
	typesPatt.compile(typesPatt);

	// Inject snippet
	// ---------------------
	function loadEditor(cm) {
		cm.setOption('mode', snip.mode);
		cm.setOption('theme', snip.theme);
		cm.setValue(snip.text);
		cm.setCursor(snip.pos);
	}
	
	// Search keyword in line
	// ---------------------
	function searchMode(line) {
		var match = line.match(typesPatt);
		if (match !== null) {
			return tmpl[match[1].toLowerCase()];
		}
		return null;
	}
	
	// Select template
	// ---------------------
	function byName(cm, type) {
		snip = tmpl[type];
		if (snip !== null) {
			cm.setOption('mode', snip.mode);
			cm.setOption('theme', snip.theme);
			cm.setValue(snip.text);
			cm.setCursor(snip.pos);
			return snip.file;			
		}
		else
			cm.setValue('Put cursor in list then press [Ctrl-$] to insert snippet:\n- ' + typeList.join('\n- '));
			return null;
	}

	// Replace CodeMirror content
	// ---------------------
	function loadSnippet(cm) {
		var pos = cm.getCursor();
		var line = cm.getLine(pos.line);
		snip = searchMode(line);
		if (snip !== null) {
			cm.setOption('mode', snip.mode);
			cm.setOption('theme', snip.theme);
			cm.setValue(snip.text);
			cm.setCursor(snip.pos);
			return snip.file;			
		}
		else
			cm.setValue('Put cursor in list then press [Ctrl-$] to insert snippet:\n- ' + typeList.join('\n- '));
			return null;
	}
	
	// Return function
	// ---------------------
	return {
		byName: byName,
		searchMode: searchMode,
		loadSnippet: loadSnippet
	};
})();